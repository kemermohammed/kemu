# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:

        cur =  head
        arr = []
        prev = None
        while cur:
            arr.append(cur)
            cur = cur.next
        # #arr[len(arr)-n].val= arr[len(arr)-n].next.val
        # #arr[len(arr)-n].next = arr[len(arr)-n].next.next
        # print(len(arr)-n)
        if len(arr) < 2:
            return
        elif len(arr)-n == 0:
            arr[len(arr)-n].val = arr[len(arr)-n+1].val
            arr[len(arr)-n].next = arr[len(arr)-n+1].next
            #arr[len(arr)-n].val = arr[len(arr)-n-2].val
        else:
            arr[len(arr)-n].val = arr[len(arr)-n-1].val
            arr[len(arr)-n-1].next = arr[len(arr)-n].next
        # #cur = prev.next
        # #prev = cur
        # #arr[len(arr)-n].next

        return arr[0]
